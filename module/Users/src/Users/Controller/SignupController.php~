<?php

namespace Admin\Controller;
namespace TarSignup\Controller;


use Zend\Mvc\Controller\AbstractActionController;
use Zend\View\Model\ViewModel;
use Admin\Form\RegisterForm;
use Admin\Form\LoginForm;
use Admin\Model\Signup;
use Admin\Model\Signin;
use Admin\Model\Admin;
use Admin\Model\AdminTable;
use Zend\Mail\Message;
use Zend\Mail\Transport\Sendmail as SendmailTransport;

class SignupController extends AbstractActionController
{
    protected $signupTable;
    protected $signinTable;
    protected $authService;
    protected $authDbTable;
    protected $sessionStorage;
    protected $bcrypt;
    protected $sessionSaveManager;
    protected $sessionManager;
    protected $adminTable;


    public function profileAction()
    {
        $key = $this->params()->fromRoute('key');
        if ($key && $this->getAuthService()->hasIdentity() && $key === $this->getAuthService()->getIdentity()) {
            return new ViewModel(array(
        		'scc'  => $this->flashMessenger()->getCurrentSuccessMessages(),
        		'err'  => $this->flashMessenger()->getCurrentErrorMessages(),
                'user' => $this->getAuthService()->getIdentity(),
            ));
        } else {
			//$this->flashMessenger()->clearMessagesFromContainer();
            $this->flashMessenger()->addErrorMessage('Session expired or not valid.');
            return $this->redirect()->toRoute('tar-signup');
        }
    }

    public function indexAction()
    {
        return new ViewModel(array(
            'admins' => $this->getAdminTable()->fetchAll(),
        ));
    }

    public function getAdminTable()
    {
        if (!$this->adminTable) {
            $sm = $this->getServiceLocator();
            $this->adminTable = $sm->get('TarSignup\Model\Admin');
        }
        return $this->adminTable;
    }

    public function logoutAction()
    {
    	if ($this->getAuthService()->hasIdentity()) {
    	    $this->getSigninTable()->setStateInactive($this->getAuthService()->getIdentity());
    		$this->getSessionManager()->forgetMe();
    		$this->getAuthService()->clearIdentity();
    		session_destroy();
    		$this->flashMessenger()->addSuccessMessage("You've been logged out");
    	}
    	return $this->redirect()->toRoute('tar-signup');
    }


    public function loginAction()
    {
        $this->_checkIfUserIsLoggedIn();
        $key = $this->params()->fromRoute('key');
        if ($key == 'success') {
        	$this->flashMessenger()->addSuccessMessage('Your account is fully activated.');
        }
        $form = new LoginForm();
        $request = $this->getRequest();
        if ($request->isPost()) {
            $signin = new Signin();
            $form->setInputFilter($signin->getInputFilter());
            $form->setData($request->getPost());
            if ($form->isValid()) {
                $signin->exchangeArray($form->getData());
                $arrData = $form->getData();
                $username = $arrData['username'];
                if ($this->getSigninTable()->getUserData($username) == FALSE) {
                    $this->flashMessenger()->addErrorMessage('Invalid Username!');
                    return $this->redirect()->toRoute('tar-signup');
                } else {
                    $userData = (array) $this->getSigninTable()->getUserData($username);
                    $password = md5($userData['salt'] . $this->getBcrypt()->create($arrData['password']));
                    if ($this->getSigninTable()->getUserData($username, $password) == FALSE) {
                        $this->flashMessenger()->addErrorMessage('Invalid Password!');
                        return $this->redirect()->toRoute('tar-signup');
                    }
                }
                if ($userData['active'] == 0) {
                    $this->flashMessenger()->addErrorMessage('In order to login you have to activate your account. Check your email.');
                    return $this->redirect()->toRoute('tar-signup');
                } elseif ($userData['banned'] == 1) {
                    $this->flashMessenger()->addErrorMessage('This account is blocked by the administrator.');
                    return $this->redirect()->toRoute('tar-signup');
                } elseif ($userData['state'] == 1) {
                    $this->flashMessenger()->addErrorMessage('Session with this credentials already active.');
                    return $this->redirect()->toRoute('index');
                } elseif ($userData['state'] == 0) {
                    $this->flashMessenger()->addErrorMessage('');
                    return $this->redirect()->toRoute('login');
                }
		 else {
                    $this->getAuthDbTable()
                            ->setTableName('users')
                            ->setIdentityColumn('username')
                            ->setCredentialColumn('password')
                            ->setIdentity($username)
                            ->setCredential($password)
                    ;
                    $this->getAuthService()
                            ->setAdapter($this->getAuthDbTable())
                            ->setStorage($this->getSessionStorage())
                    ;
                    $result = $this->getAuthService()->authenticate();
                    foreach($result->getMessages() as $message) {
                    	$this->flashMessenger()->addErrorMessage($message);
                    }
                    if ($result->isValid()) {
                        $this->getSigninTable()->setStateActive($username);
                    	if ($arrData['remember'] == 1 ) {
                    		$this->getSessionManager()->rememberMe(100000);
                    	}
                    	$resultRow = (array) $this->getAuthDbTable()->getResultRowObject(array('id', 'username'));
                    	$this->getSessionStorage()->write($resultRow['username']);
                    	return $this->redirect()->toRoute('admin', array(
                            'action' => 'index',
                            'key'    => $this->getAuthService()->getIdentity(),
                    	));
                    }
                }
            } else {
                $this->flashMessenger()->addErrorMessage('Form data error');
                return $this->redirect()->toRoute('tar-signup');
            }
        }
        return new ViewModel(array(
            'form' => $form,
            'scc'  => $this->flashMessenger()->getCurrentSuccessMessages(),
            'err'  => $this->flashMessenger()->getCurrentErrorMessages(),
        ));
    }

    public function activateAction()
    {
        $this->_checkIfUserIsLoggedIn();
        $key = $this->params()->fromRoute('key');
        if ($key) {
            $userData = $this->getSignupTable()->activateUser($key);
            if($userData !== FALSE) {
                return $this->redirect()->toRoute('tar-signup', array(
            		'action' => 'login',
                    'key'    => 'success',
                ));
            } else {
                $this->flashMessenger()->addErrorMessage('No match found or user already activated.');
                return $this->redirect()->toRoute('tar-signup');
            }
        } else {
            $this->flashMessenger()->addErrorMessage('Sorry! Activation failed. Please try again later.');
            return $this->redirect()->toRoute('tar-signup');
        }
    }

    public function noticeAction()
    {
        $this->_checkIfUserIsLoggedIn();
    	return new ViewModel();
    }

    public function registerAction()
    {
        $this->_checkIfUserIsLoggedIn();
        $form = new RegisterForm();
        $request = $this->getRequest();
        if ($request->isPost()) {
        	$signup = new Signup();
        	$form->setInputFilter($signup->getInputFilter());
        	$form->setData($request->getPost());
        	if ($form->isValid()) {
        		$signup->exchangeArray($form->getData());
        		$arrData = $form->getData();
        		$this->getSignupTable()->checkUserExists($arrData['username']) ?
        		      TRUE : $this->flashMessenger()->addErrorMessage('Username already exists');
        		$this->getSignupTable()->checkEmailExists($arrData['email']) ?
        		      TRUE : $this->flashMessenger()->addErrorMessage('Email already exists');
        		if (!$this->flashMessenger()->hasCurrentErrorMessages()) {

        		    /*** Start Mail Configuration ***/
        		    $addTo        = $arrData['email'];
        		    $addFrom      = 'register@bisoncargo.com';
        		    $setSubject   = 'Your Registration is Pending Approval';
        		    $hyperlink    = '<a href="http://localhost/zend/xtest/public/signup/activate/' .
        		                    $arrData['security'] . '">Click Here To Activate Your Account</a>';
        		    $setBody      =
                    'Greetings ' . ucfirst($arrData['name']) .
                    ',<br />
                    Thank you for applying for registration with us. We have
                    received your request and we will process it as soon as you
                    confirm your email address by clicking on the following
                    hyperlink:
                    <br />' .
                    $hyperlink;
        		    /*** End Mail Configuration ***/

        		    $message = new Message();
        		    $message->setEncoding("UTF-8");
        		    $message->toString();
        		    $message->addTo($addTo)
                		    ->addFrom($addFrom)
                		    ->setSubject($setSubject)
                		    ->setBody($setBody);
        		    $transport = new SendmailTransport();

			        /*** For productin uncomment the following block of code ***/
			        /*** In XAMPP throw error ***/

        		    /*
        		    if ($transport->send($message)) {
            		    $this->getSignupTable()->saveUser($signup);
        		    }
        		    */

        		    /*** For save registration form test uncomment the following line ***/
        		    $this->getSignupTable()->saveUser($signup);

        		    return $this->redirect()->toRoute('tar-signup', array(
                		'action' => 'notice'
                    ));
        		}
        	}
        }
        return new ViewModel(array(
            'form' => $form,
			'scc'  => $this->flashMessenger()->getCurrentSuccessMessages(),
            'err'  => $this->flashMessenger()->getCurrentErrorMessages(),
        ));
    }

    public function getSessionManager()
    {
        if (!$this->sessionManager) {
        	$sm = $this->getServiceLocator();
        	$this->sessionManager = $sm->get('SessionManager');
        }
        return $this->sessionManager;
	}

    public function getSignupTable()
    {
        if (!$this->signupTable) {
        	$sm = $this->getServiceLocator();
        	$this->signupTable = $sm->get('Admin\Model\SignupTable');
        }
        return $this->signupTable;
	}

	public function getSigninTable()
	{
		if (!$this->signinTable) {
			$sm = $this->getServiceLocator();
			$this->signinTable = $sm->get('Admin\Model\SigninTable');
		}
		return $this->signinTable;
	}

	public function getAuthService()
	{
		if (!$this->authService) {
			$sm = $this->getServiceLocator();
			$this->authService = $sm->get('AuthService');
		}
		return $this->authService;
	}

	public function getAuthDbTable()
	{
		if (!$this->authDbTable) {
			$sm = $this->getServiceLocator();
			$this->authDbTable = $sm->get('AuthDbTable');
		}
		return $this->authDbTable;
	}

	public function getSessionStorage()
	{
		if (!$this->sessionStorage) {
			$sm = $this->getServiceLocator();
			$this->sessionStorage = $sm->get('SessionStorage');
		}
		return $this->sessionStorage;
	}

	public function getBcrypt()
	{
		if (!$this->bcrypt) {
			$sm = $this->getServiceLocator();
			$this->bcrypt = $sm->get('Bcrypt');
		}
		return $this->bcrypt;
	}

	final private function _checkIfUserIsLoggedIn()
	{
        if ($this->getAuthService()->hasIdentity()) {
        	return $this->redirect()->toRoute('tar-signup', array(
        		'action' => 'profile',
                'key'    => $this->getAuthService()->getIdentity(),
            ));
        }
	}
}
